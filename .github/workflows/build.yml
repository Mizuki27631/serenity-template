on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.job.os }}

    strategy:
      matrix:
        job:
          # - { os: ubuntu-latest  , target: x86_64-unknown-linux-gnu       , extension: ""   }
          - { os: ubuntu-latest  , target: x86_64-unknown-linux-musl        ,  extension: ""   }
          # - { os: ubuntu-latest  , target: armv7-unknown-linux-gnueabihf  , extension: ""   }
          # - { os: ubuntu-latest  , target: armv7-unknown-linux-musleabihf , extension: ""   }
          # - { os: ubuntu-latest  , target: aarch64-unknown-linux-gnu      , extension: ""   }
          - { os: ubuntu-latest  , target: aarch64-unknown-linux-musl     , extension: ""   }
          # - { os: macos-latest   , target: x86_64-apple-darwin            , extension: ""   }
          # - { os: macos-latest   , target: aarch64-apple-darwin           , extension: ""   }
          - { os: windows-latest , target: x86_64-pc-windows-msvc           , extension: .exe }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].name')" >> $GITHUB_ENV

      - name: install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-${{ hashFiles('./Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-

      - name: Check license
        run: |
          cargo install --locked cargo-deny || true
          cargo deny check licenses

      - name: Generate ThirdpartyLicenses.html
        run: |
          cargo install --locked cargo-about || true
          cargo about generate about.hbs -o ThirdpartyLicenses.html
      
      - name: build app
        run: |
          cargo build --release
          cp target/release/${{ env.PROJECT_NAME }}${{ matrix.job.extension }} ./
      
      - name: Package artifacts into zip
        run: |
          if ("${{ runner.os }}" -eq "Windows") {
            $zipName = "${{ env.PROJECT_NAME }}-${{ matrix.job.target }}.zip"
            Compress-Archive -Path "${{ env.PROJECT_NAME }}${{ matrix.job.extension }}", "ThirdpartyLicenses.html" -DestinationPath $zipName -Force
            
            echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
          }
          else {
            zip -j "${{ env.PROJECT_NAME }}-${{ matrix.job.target }}.zip" "${{ env.PROJECT_NAME }}${{ matrix.job.extension }}" ThirdpartyLicenses.html
            echo "ZIP_NAME=${{ env.PROJECT_NAME }}-${{ matrix.job.target }}.zip" >> $env:GITHUB_ENV
          }
        shell: pwsh

      - name: Attach File
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: ${{ env.ZIP_NAME }}